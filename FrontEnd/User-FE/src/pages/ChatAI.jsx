import { useState, useRef, useEffect } from "react";
import Header from "../layout/Header";
import useAiChat from "@/hooks/useAiChat";
import useAuth from "@/hooks/useAuth";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Textarea } from "@/components/ui/textarea";
import {
  BotIcon,
  SendIcon,
  RotateCwIcon,
  HistoryIcon,
  ClockIcon,
  MenuIcon,
  PlusIcon,
} from "lucide-react";
import { toast } from "react-toastify";
import { format } from "date-fns";
import { vi } from "date-fns/locale";

function ChatAI() {
  const [message, setMessage] = useState("");
  const [showSidebar, setShowSidebar] = useState(true);
  const [isMobile, setIsMobile] = useState(false);
  const messageContainerRef = useRef(null);
  const inputRef = useRef(null);
  const navigate = useNavigate();
  const { auth } = useAuth();

  const {
    messages,
    loading,
    error,
    sendMessage,
    clearChatHistory,
    sessions,
    loadingSessions,
    fetchChatSessions,
    selectChatSession,
    sessionId,
  } = useAiChat();

  // Ki·ªÉm tra k√≠ch th∆∞·ªõc m√†n h√¨nh ƒë·ªÉ x√°c ƒë·ªãnh thi·∫øt b·ªã di ƒë·ªông
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
      if (window.innerWidth < 768) {
        setShowSidebar(false);
      }
    };

    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);

    return () => {
      window.removeEventListener("resize", checkScreenSize);
    };
  }, []);

  // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
  useEffect(() => {
    if (!auth?.accessToken) {
      toast.info("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng tr·ª£ l√Ω AI");
      navigate("/account/login", { state: { from: { pathname: "/chat-ai" } } });
    } else {
      fetchChatSessions();
    }
  }, [auth, navigate, fetchChatSessions]);

  // Cu·ªôn xu·ªëng cu·ªëi c√πng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (messageContainerRef.current) {
      messageContainerRef.current.scrollTop =
        messageContainerRef.current.scrollHeight;
    }
  }, [messages]);

  // Focus v√†o input khi trang ƒë∆∞·ª£c t·∫£i
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!message.trim()) return;

    await sendMessage(message);
    setMessage("");
  };

  // Format th·ªùi gian
  const formatTime = (timestamp) => {
    try {
      if (!timestamp) return "";
      const date = new Date(timestamp);
      return format(date, "HH:mm", { locale: vi });
    } catch {
      return "";
    }
  };

  // Format ng√†y th√°ng
  const formatDate = (timestamp) => {
    try {
      if (!timestamp) return "";
      const date = new Date(timestamp);
      return format(date, "dd/MM/yyyy HH:mm", { locale: vi });
    } catch {
      return "";
    }
  };

  // X·ª≠ l√Ω khi ch·ªçn m·ªôt phi√™n chat t·ª´ l·ªãch s·ª≠
  const handleSelectSession = (sessionId) => {
    selectChatSession(sessionId);
    if (isMobile) {
      setShowSidebar(false);
    }
  };

  // Hi·ªÉn th·ªã c√°c tin nh·∫Øn
  const renderMessages = () => {
    if (messages.length === 0) {
      return (
        <div className="flex flex-col items-center justify-center h-full py-10 px-4">
          <div className="text-center mb-8 max-w-2xl">
            <div className="inline-block bg-green-100 p-4 rounded-full mb-6">
              <BotIcon size={48} className="text-green-500" />
            </div>
            <h3 className="text-2xl font-medium text-gray-800 mb-3">
              Tr·ª£ l√Ω AI N√¥ng nghi·ªáp
            </h3>
            <p className="text-center text-gray-600 mx-auto mb-8">
              Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr·ª£ l√Ω AI c·ªßa ch√∫ng t√¥i. H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ
              n√¥ng nghi·ªáp, k·ªπ thu·∫≠t canh t√°c, ho·∫∑c b·∫•t k·ª≥ v·∫•n ƒë·ªÅ g√¨ li√™n quan
              ƒë·∫øn n√¥ng nghi·ªáp.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-w-2xl w-full">
            <div className="bg-gray-50 hover:bg-gray-100 p-4 rounded-lg border border-gray-200 cursor-pointer transition-colors">
              <h4 className="font-medium text-gray-800 mb-1">
                üå± K·ªπ thu·∫≠t tr·ªìng tr·ªçt
              </h4>
              <p className="text-sm text-gray-600">
                H∆∞·ªõng d·∫´n v·ªÅ c√°ch tr·ªìng v√† chƒÉm s√≥c c√¢y tr·ªìng
              </p>
            </div>
            <div className="bg-gray-50 hover:bg-gray-100 p-4 rounded-lg border border-gray-200 cursor-pointer transition-colors">
              <h4 className="font-medium text-gray-800 mb-1">üêÑ ChƒÉn nu√¥i</h4>
              <p className="text-sm text-gray-600">
                Th√¥ng tin v·ªÅ chƒÉn nu√¥i v√† ph√≤ng b·ªánh cho v·∫≠t nu√¥i
              </p>
            </div>
            <div className="bg-gray-50 hover:bg-gray-100 p-4 rounded-lg border border-gray-200 cursor-pointer transition-colors">
              <h4 className="font-medium text-gray-800 mb-1">
                ‚õÖ Th·ªùi ti·∫øt v√† m√πa v·ª•
              </h4>
              <p className="text-sm text-gray-600">
                H∆∞·ªõng d·∫´n v·ªÅ th·ªùi v·ª• v√† ·∫£nh h∆∞·ªüng c·ªßa th·ªùi ti·∫øt
              </p>
            </div>
            <div className="bg-gray-50 hover:bg-gray-100 p-4 rounded-lg border border-gray-200 cursor-pointer transition-colors">
              <h4 className="font-medium text-gray-800 mb-1">
                ü¶† Ph√≤ng tr·ª´ s√¢u b·ªánh
              </h4>
              <p className="text-sm text-gray-600">
                C√°ch nh·∫≠n bi·∫øt v√† ƒë·ªëi ph√≥ v·ªõi s√¢u b·ªánh h·∫°i
              </p>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="w-full max-w-4xl mx-auto">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`py-6 px-4 ${
              index < messages.length - 1 ? "border-b border-gray-200" : ""
            }`}
          >
            <div className="flex items-start max-w-3xl mx-auto">
              {msg.role === "assistant" ? (
                <Avatar className="h-10 w-10 mr-4 mt-1 flex-shrink-0 border-2 border-green-100 p-0.5">
                  <AvatarImage
                    src="/robot-avatar.png"
                    alt="AI"
                    className="rounded-full"
                  />
                  <AvatarFallback className="bg-green-100 text-green-800">
                    AI
                  </AvatarFallback>
                </Avatar>
              ) : (
                <Avatar className="h-10 w-10 mr-4 mt-1 flex-shrink-0 border-2 border-blue-100 p-0.5">
                  <AvatarImage
                    src={auth?.user?.imageUrl || "/placeholder-avatar.png"}
                    alt={auth?.user?.userName || "User"}
                    className="rounded-full"
                  />
                  <AvatarFallback className="bg-blue-100 text-blue-800">
                    {auth?.user?.userName?.charAt(0) || "U"}
                  </AvatarFallback>
                </Avatar>
              )}

              <div className="flex-1 min-w-0">
                <div className="mb-1 flex items-center">
                  <span
                    className={`font-medium ${
                      msg.role === "assistant"
                        ? "text-green-700"
                        : "text-blue-700"
                    }`}
                  >
                    {msg.role === "assistant"
                      ? "Tr·ª£ l√Ω AI"
                      : auth?.user?.userName || "B·∫°n"}
                  </span>
                  <span className="text-xs text-gray-400 ml-2">
                    {formatTime(msg.timestamp)}
                  </span>
                </div>

                <div
                  className={`prose prose-sm max-w-none ${
                    msg.role === "assistant" ? "text-gray-800" : "text-gray-700"
                  }`}
                >
                  <div className="whitespace-pre-wrap bg-gray-50 rounded-lg p-4 border border-gray-100 shadow-sm">
                    {msg.content}
                  </div>
                </div>

                {msg.source && (
                  <div className="mt-2 text-xs text-gray-500 italic">
                    <span className="font-semibold">Ngu·ªìn:</span> {msg.source}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  };

  // Hi·ªÉn th·ªã thanh b√™n l·ªãch s·ª≠ chat
  const renderSidebar = () => (
    <div
      className={`bg-gray-900 text-white h-[calc(100vh-64px)] w-80 flex flex-col ${
        showSidebar ? "block" : "hidden"
      } md:block transition-all duration-300 ease-in-out`}
    >
      <div className="p-4 flex justify-between items-center border-b border-gray-800">
        <h2 className="font-semibold text-lg">L·ªãch s·ª≠ tr√≤ chuy·ªán</h2>
        <div className="flex items-center space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={clearChatHistory}
            className="text-gray-400 hover:text-white hover:bg-gray-800 p-1 h-8 w-8 rounded-full"
            title="Cu·ªôc tr√≤ chuy·ªán m·ªõi"
          >
            <PlusIcon size={16} />
          </Button>
        </div>
      </div>

      <div className="flex-1 overflow-auto px-2 py-3">
        {loadingSessions ? (
          <div className="flex justify-center items-center py-8">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
          </div>
        ) : sessions.length === 0 ? (
          <div className="text-center py-6 px-4 text-gray-400">
            <div className="mb-2">
              <HistoryIcon className="inline-block h-10 w-10 opacity-50 mb-2" />
            </div>
            <p>Kh√¥ng c√≥ l·ªãch s·ª≠ tr√≤ chuy·ªán</p>
            <p className="text-xs mt-2">Tr√≤ chuy·ªán m·ªõi s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y</p>
          </div>
        ) : (
          <div className="space-y-2">
            {sessions.map((session) => (
              <div
                key={session.sessionId}
                className={`px-3 py-3 hover:bg-gray-800 rounded-lg cursor-pointer transition-colors ${
                  session.sessionId === sessionId
                    ? "bg-gray-800 border-l-4 border-green-500"
                    : ""
                }`}
                onClick={() => handleSelectSession(session.sessionId)}
              >
                <div className="flex items-center">
                  <HistoryIcon
                    size={14}
                    className="text-gray-400 mr-2 flex-shrink-0"
                  />
                  <span className="text-sm truncate font-medium">
                    {session.title || "Cu·ªôc tr√≤ chuy·ªán m·ªõi"}
                  </span>
                </div>
                <div className="text-xs text-gray-500 mt-1 pl-6 flex items-center">
                  <ClockIcon size={12} className="mr-1" />
                  {formatDate(session.createdAt)}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-white">
      <Header />
      <div className="flex h-[calc(100vh-64px)] mt-16">
        {/* Sidebar */}
        {renderSidebar()}

        {/* Main content */}
        <div className="flex-1 flex flex-col h-full relative">
          {/* Mobile menu button */}
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowSidebar(!showSidebar)}
            className="md:hidden absolute top-4 left-4 z-10 bg-white border shadow-sm rounded-full p-2 h-10 w-10"
          >
            <MenuIcon size={20} />
          </Button>

          {/* Messages container */}
          <div
            ref={messageContainerRef}
            className="flex-1 overflow-y-auto py-4 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100"
          >
            {renderMessages()}

            {loading && (
              <div className="flex justify-center items-center py-6">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-500"></div>
              </div>
            )}

            {error && !loading && (
              <div className="max-w-3xl mx-auto px-6 mt-4">
                <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-md shadow-sm">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg
                        className="h-5 w-5 text-red-500"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm text-red-700">{error}</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Input container */}
          <div className="bg-white border-t border-gray-200 p-4 shadow-md">
            <div className="max-w-3xl mx-auto">
              <form onSubmit={handleSendMessage}>
                <div className="relative">
                  <Textarea
                    ref={inputRef}
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    placeholder="H·ªèi v·ªÅ n√¥ng nghi·ªáp, k·ªπ thu·∫≠t tr·ªìng tr·ªçt, chƒÉn nu√¥i..."
                    className="min-h-[60px] pr-16 py-3 px-4 resize-none border rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();
                        handleSendMessage(e);
                      }
                    }}
                  />
                  <Button
                    type="submit"
                    disabled={loading || !message.trim()}
                    className="absolute right-2 bottom-2 bg-green-500 hover:bg-green-600 text-white h-10 w-10 rounded-lg p-0 flex items-center justify-center shadow-sm transition-colors"
                  >
                    {loading ? (
                      <RotateCwIcon size={18} className="animate-spin" />
                    ) : (
                      <SendIcon size={18} />
                    )}
                  </Button>
                </div>
                <p className="text-xs text-gray-500 mt-2 text-center">
                  Nh·∫•n Enter ƒë·ªÉ g·ª≠i, Shift+Enter ƒë·ªÉ xu·ªëng d√≤ng
                </p>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ChatAI;
