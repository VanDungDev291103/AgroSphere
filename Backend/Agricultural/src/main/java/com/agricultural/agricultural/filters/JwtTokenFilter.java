package com.agricultural.agricultural.filters;

import com.agricultural.agricultural.components.JwtTokenUtil;
import com.agricultural.agricultural.entity.User;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.util.Pair;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@Component
@RequiredArgsConstructor
public class JwtTokenFilter extends OncePerRequestFilter {
    @Value("${api.prefix}")
    private String apiPrefix;
    private final JwtTokenUtil jwtTokenUtil;
    private final UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(@NonNull HttpServletRequest request,
                                    @NonNull HttpServletResponse response,
                                    @NonNull FilterChain filterChain)
            throws ServletException, IOException {
        try {
            // Ghi log ƒë∆∞·ªùng d·∫´n URL v√† ph∆∞∆°ng th·ª©c ƒë·ªÉ debug
            String requestURI = request.getRequestURI();
            String method = request.getMethod();
            System.out.println("Request URI: " + requestURI + ", Method: " + method);
            
            // Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n login/register tr∆∞·ªõc khi x·ª≠ l√Ω JWT
            if (requestURI.contains("/users/login") || requestURI.contains("/users/register")) {
                System.out.println("Login/Register request - bypassing JWT filter");
                filterChain.doFilter(request, response);
                return;
            }
            
            // üìå B·ªè qua x√°c th·ª±c n·∫øu API kh√¥ng y√™u c·∫ßu token
            if (isBypassToken(request)) {
                filterChain.doFilter(request, response);
                return;
            }

            // üìå Ki·ªÉm tra header Authorization
            final String authHeader = request.getHeader("Authorization");
            
            // B·ªè qua ki·ªÉm tra JWT n·∫øu kh√¥ng c√≥ header, ƒë·ªÉ API c√¥ng khai v·∫´n ho·∫°t ƒë·ªông
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                System.out.println("Missing or invalid Authorization header for: " + requestURI);
                // Cho c√°c request kh√¥ng c√≥ token v·∫´n ƒëi qua filter chain 
                // ƒë·ªÉ SecurityConfig quy·∫øt ƒë·ªãnh c√≥ cho ph√©p truy c·∫≠p hay kh√¥ng
                filterChain.doFilter(request, response);
                return;
            }

            // üìå Tr√≠ch xu·∫•t token v√† l·∫•y th√¥ng tin user t·ª´ token
            final String token = authHeader.substring(7); // B·ªè "Bearer "
            final String email = jwtTokenUtil.extractEmail(token);

            // üìå N·∫øu token h·ª£p l·ªá v√† user ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c
            if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                try {
                    User userDetails = (User) userDetailsService.loadUserByUsername(email);
                    
                    if (jwtTokenUtil.validateToken(token, userDetails.getEmail())) {
                        // Ch·ªâ s·ª≠ d·ª•ng c√°c thu·ªôc t√≠nh eager c·ªßa User, kh√¥ng truy c·∫≠p c√°c thu·ªôc t√≠nh lazy
                        UsernamePasswordAuthenticationToken authenticationToken =
                                new UsernamePasswordAuthenticationToken(
                                        userDetails, null, userDetails.getAuthorities()
                                );
                        authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                        SecurityContextHolder.getContext().setAuthentication(authenticationToken);
                    } else {
                        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Token kh√¥ng h·ª£p l·ªá");
                        return;
                    }
                } catch (Exception e) {
                    System.out.println("L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng: " + e.getMessage());
                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng: " + e.getMessage());
                    return;
                }
            } else if (email == null) {
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t email t·ª´ token");
                return;
            }

            // üìå Ti·∫øp t·ª•c x·ª≠ l√Ω request
            filterChain.doFilter(request, response);

        } catch (Exception e) {
            System.out.println("L·ªói x√°c th·ª±c JWT: " + e.getMessage());
            e.printStackTrace();
            
            // Ghi log th√™m th√¥ng tin cho debug
            if (request.getRequestURI().contains("user-addresses")) {
                System.out.println("Debug API user-addresses:");
                System.out.println("URI: " + request.getRequestURI());
                System.out.println("Method: " + request.getMethod());
                System.out.println("Has Authorization header: " + (request.getHeader("Authorization") != null));
                if (request.getHeader("Authorization") != null) {
                    System.out.println("Auth header starts with Bearer: " + request.getHeader("Authorization").startsWith("Bearer "));
                }
            }
            
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "L·ªói x√°c th·ª±c: " + e.getMessage());
        }
    }

    private boolean isBypassToken(@NonNull HttpServletRequest request) {
        // Log URL ƒë·ªÉ debug
        System.out.println("Current request URL: " + request.getRequestURI());
        System.out.println("Current request method: " + request.getMethod());
        
        final List<Pair<String, String>> bypassTokens = Arrays.asList(
                Pair.of(String.format("%s/roles", apiPrefix), "GET"),
                // ƒê·∫£m b·∫£o URL ƒëƒÉng nh·∫≠p ƒë√∫ng format, th√™m nhi·ªÅu pattern c√≥ th·ªÉ
                Pair.of(String.format("%s/users/login", apiPrefix), "POST"),
                Pair.of(String.format("%s/users/register", apiPrefix), "POST"),
                // Th√™m URL kh√¥ng c√≥ ti·ªÅn t·ªë api.prefix n·∫øu c·∫ßn
                Pair.of("/api/v1/users/login", "POST"),
                Pair.of("/api/users/login", "POST"),
                
                // API refresh token v√† logout
                Pair.of(String.format("%s/auth/refresh-token", apiPrefix), "POST"),
                Pair.of(String.format("%s/auth/logout", apiPrefix), "POST"),
                
                // Ch·ªâ bypass c√°c API c√¥ng khai li√™n quan ƒë·∫øn th·ªùi ti·∫øt
                Pair.of(String.format("%s/weather/locations", apiPrefix), "GET"),
                Pair.of(String.format("%s/weather/locations/[0-9]+$", apiPrefix), "GET"),
                
                // T·∫°m th·ªùi bypass ƒë·ªÉ debug
                Pair.of(String.format("%s/weather-subscriptions", apiPrefix), "GET"),
                Pair.of(String.format("%s/user-addresses", apiPrefix), "GET")
        );

        // In ra t·∫•t c·∫£ c√°c pattern bypass ƒë·ªÉ debug
        System.out.println("===== Bypass patterns =====");
        for (Pair<String, String> bypass : bypassTokens) {
            System.out.println(bypass.getFirst() + " - " + bypass.getSecond());
        }
        System.out.println("===========================");

        for (Pair<String, String> bypassToken : bypassTokens) {
            String pattern = bypassToken.getFirst();
            if ((pattern.contains("[") && 
                 request.getRequestURI().matches(pattern) &&
                 request.getMethod().equalsIgnoreCase(bypassToken.getSecond())) ||
                (request.getRequestURI().equals(pattern) &&
                 request.getMethod().equalsIgnoreCase(bypassToken.getSecond())) ||
                // Th√™m ki·ªÉm tra URL k·∫øt th√∫c b·∫±ng pattern ƒë·ªÉ ƒë·∫£m b·∫£o ph·ªß h·∫øt c√°c tr∆∞·ªùng h·ª£p
                (request.getRequestURI().endsWith(pattern) && 
                 request.getMethod().equalsIgnoreCase(bypassToken.getSecond()))) {
                System.out.println("URL bypassed: " + request.getRequestURI());
                return true;
            }
        }
        
        // Log URL kh√¥ng ƒë∆∞·ª£c bypass ƒë·ªÉ debug
        System.out.println("URL not bypassed: " + request.getRequestURI());
        return false;
    }
}
